<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tag;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getArticleByIdWithLeftJoin($id)
    {
        //"Construis moi cette requête et appelle l'alias a"
        $qb = $this->createQueryBuilder('a');
        //Fait tout seul la jointure avec l'id de l'élément image
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.comments', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.id = ?1')
                ->setParameter(1, $id)
                ->orderBy('a.date', 'DESC');

        $query = $qb->getQuery();
        $article = $query->getOneOrNullResult();
        return $article;
    }
    public function getArticleBySlugWithLeftJoin($slug)
    {
        //"Construis moi cette requête et appelle l'alias a"
        $qb = $this->createQueryBuilder('a');
        //Fait tout seul la jointure avec l'id de l'élément image
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.comments', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.slug = ?1')
                ->setParameter(1, $slug)
                ->orderBy('a.date', 'DESC');

        $query = $qb->getQuery();
        $article = $query->getOneOrNullResult();
        return $article;
    }

    public function getPublishedArticlesWithLeftJoinForIndex()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.comments', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.publication = 1')
                ->orderBy('a.date', 'DESC');
        $query = $qb->getQuery();
        $articles = $query->getResult();
        return $articles;
    }

    public function getPublishedArticlesWithLeftJoinForIndexWithPagination($limit, $offset, $locale)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.publication = 1')
                ->addorderBy('a.id', 'DESC')
                ->addorderBy('a.date', 'DESC')
                ->setFirstResult($offset)
                ->setMaxResults($limit);
        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE, $locale // take locale from session or request etc.
        );
        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true);
        return new Paginator($query);
    }

    public function getPublishedArticlesWithLeftJoinByTag($tag)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('t.id = ?1')
                ->setParameter(1, $tag)
                ->orderBy('a.date', 'DESC');
        return $query = $qb->getQuery();
    }

//    public function getTagCount(AppBundle\Entity\Tag $tag) {
//        $qb = $this->createQueryBuilder('a');
//        $qb->select('count(a)')
//                ->leftJoin('a.tags', 't')
//                ->where('t=?1')
//                ->setParameters(1, $tag)
//                ->andWhere('a.publication = true');
//        return $query = $qb->getQuery()->getSingleScalarResult();
//        //return $articles;
//    }
    public function getTagCount(Tag $tag)
    {
        $qb = $this->createQueryBuilder("a");
        $qb->select('count(a)')
                ->leftJoin('a.tags', 't')
                ->where('t = ?1')
                ->setParameter(1, $tag)
                ->andWhere('a.publication = true')
        ;
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getYears($limit = 5)
    {
        if ((int) $limit) {
            return $this->createQueryBuilder('a')
                            ->select('SUBSTRING(a.date,1,4)')
                            ->distinct()
                            ->orderBy('a.date', 'DESC')
                            ->setMaxResults($limit)
                            ->getQuery()
                            ->getResult();
        }
        return null;
    }

    public function getArticlesByYear($year)
    {
        $debut = $year . '-01-01';
        $fin = $year . '-12-31';
        $qb = $this->createQueryBuilder('a')
                ->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.date >= ?1 AND a.date<= ?2')
                ->setParameter(1, $debut)
                ->setParameter(2, $fin)
                ->andWhere('a.publication = 1')
                ->orderBy('a.date', 'DESC');

        $query = $qb->getQuery();

        return $query->getArrayResult();
    }
}
